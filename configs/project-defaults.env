# The main project infrastructure configuration file
### Info
# File should be properly formatted:
# it means NO QUOTES AROUND VALUES AND NO SPACES BETWEEN PARAM=VALUE
### Info
# All basic configs should be localed in {devbox_root}/configs/* directories
# If you want to override it, just copy required file with the same structure into {devbox_root}/projects/{my_project}/configs/*
### Info
# DevBox will create docker containers named "${PROJECT_NAME}_${CONTAINER_*_NAME}" using the image ${CONTAINER_*_IMAGE}:${CONTAINER_*_VERSION}

# SUBNET
#==========================================
PROJECT_NAME=my_project
COMPOSE_PROJECT_NAME=my_project
MACHINE_IP_ADDRESS=127.0.0.1
COMPOSE_CONVERT_WINDOWS_PATHS=1
#==========================================


#==========================================
# obsolete, not used anymore
#PLATFORM_NAME=
#==========================================

# PORTAINER (obsolete)
#==========================================
# obsolete, moved to {devbox_root}/configs/infrastructure/infra.env
#PORTAINER_PORT=9999
#==========================================

# MAILHOG (obsolete)
#==========================================
# obsolete, moved to ${devbox_root}/configs/infrastructure/infra.env
#MAILER_TYPE=mailhog
# obsolete, moved to ${devbox_root}/configs/infrastructure/infra.env
#MAILHOG_PORT=8025
#==========================================

# ADMINER (obsolete)
#==========================================
# obsolete, moved to ${devbox_root}/configs/infrastructure/infra.env
#ADMINER_ENABLE=no
#==========================================


#NGINX REVERS-PROXY CONFIGS PROVIDER
#==========================================
# nginx-reverse-proxy config provider directory
# website proxy configs from directory configs/nginx-reverse-proxy/${CONFIGS_PROVIDER_NGINX_PROXY} will be prepared during starting
CONFIGS_PROVIDER_NGINX_PROXY=default
#==========================================

#WEB CONTAINER CONFIGURATION
#==========================================
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_WEB_NAME=web
# image name of the related docker container
# last numbers might be omited for image name 'madebyewave/devbox-nginx-php', PHP_VERSION param will be appended to image name in this case
CONTAINER_WEB_IMAGE=madebyewave/devbox-nginx-php7.4
# image version of the related docker container
CONTAINER_WEB_VERSION=latest
# installed php version, used for docker images by madebyewave
PHP_VERSION=7.4
# host name of your website
WEBSITE_HOST_NAME=my_project.local
# additional domains for nginx configs
# comma-separated list without spaces, list will be merged with WEBSITE_HOST_NAME for nginx configs
WEBSITE_EXTRA_HOST_NAMES=
# website protocol
# allowed values: 'http' and 'https'
WEBSITE_PROTOCOL=http

# root directory of repository source code
WEBSITE_SOURCES_ROOT=/var/www/public_html
# application directory
# usefull in case application root is not equal to WEBSITE_SOURCES_ROOT
# for example /var/www/public_html/src
WEBSITE_APPLICATION_ROOT=/var/www/public_html
# directory for shared miscelanous files
# currently used to share composer and ssh credentials files to the container
# could be used to share any files which should be available inside container
WEBSITE_SHARE_DIR=/var/www/share

# config provider directory
# container configs from directory configs/nginx/${CONFIGS_PROVIDER_NGINX} will be prepared during starting
# available providers: default,magento1,magento2,akeneo3,akeneo4,drupal,joomla,laravel,wordpress,no-php
CONFIGS_PROVIDER_NGINX=default
# ssl certificated config provider directory, used only in case WEBSITE_PROTOCOL is https
# cert files from directory configs/ssl/${CONFIGS_PROVIDER_SSL} will be prepared during starting
# is empty, internal crt + key files will be generated
CONFIGS_PROVIDER_SSL=default
# you can specify your own certificate file name in case it is different from website host
# extensions ".crt" and ".key" will be appended automatically
WEBSITE_SSL_CERT_FILENAME=${WEBSITE_HOST_NAME}
# php config provider directory
# container configs from directory configs/php/${CONFIGS_PROVIDER_PHP} will be prepared during starting
# available providers: default
CONFIGS_PROVIDER_PHP=default
# exposed port for container ssh connections
# allowed values range: 2300-2499
# if empty first avaialble port from the given range will be allocated
CONTAINER_WEB_SSH_PORT=

# docker-sync config provider directory which defines files sharing settings between host system and docker volumes
# container configs from directory configs/docker-sync/website/${CONFIGS_PROVIDER_WEBSITE_DOCKER_SYNC} will be prepared during starting
# available providers: default,magento1,magento2,akeneo3,akeneo4
CONFIGS_PROVIDER_WEBSITE_DOCKER_SYNC=default
# docker-sync config provider directory which defines files sharing settings between host system and docker volumes
# container configs from directory configs/docker-sync/composer/${CONFIGS_PROVIDER_COMPOSER_DOCKER_SYNC} will be prepared during starting
# available providers: global, local, [empty value]
# global - use global composer folder from host, local - use project level folder to store composer cache, empty value - do not sync composer folder
CONFIGS_PROVIDER_COMPOSER_CACHE_DOCKER_SYNC=global
# docker-sync config provider directory which defines files sharing settings between host system and docker volumes
# container configs from directory configs/docker-sync/node_modules/${CONFIGS_PROVIDER_NODE_MODULES_DOCKER_SYNC} will be prepared during starting
# available providers: default, [empty value]
# keep value empty in case you do not need to sync node_modules
CONFIGS_PROVIDER_NODE_MODULES_DOCKER_SYNC=default

# xdebug host and port, starting from xdebug 3.0 host is almost not used because of resolving from superglobal server variables
# keep it empty to evaluate automatically for your docker engine
# port 9003 is default starting from xdebug 3.0
WEBSITE_PHP_XDEBUG_HOST=
WEBSITE_PHP_XDEBUG_PORT=9001

# bash config provider directory
# container configs from directory configs/bash/${CONFIGS_PROVIDER_BASH} will be prepared during starting
# available providers: default, magento2, akeneo
CONFIGS_PROVIDER_BASH=default

# WEBSITE_DOCUMENT_ROOT is deprecated, left just for backward compatibility
# use WEBSITE_SOURCES_ROOT and WEBSITE_APPLICATION_ROOT instead
WEBSITE_DOCUMENT_ROOT=${WEBSITE_APPLICATION_ROOT}

#==========================================

# MYSQL CONTAINER CONFIGURATION #
#==========================================
# enabled flag, allowed values: "yes", "no"
MYSQL_ENABLE=yes
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_MYSQL_NAME=mysql
# image name of the related docker container
CONTAINER_MYSQL_IMAGE=mysql
# image version of the related docker container
CONTAINER_MYSQL_VERSION=5.7
# exposed port for mysql docker service
# allowed values range: 3306-3499
# if empty first avaialble port from the given range will be allocated
CONTAINER_MYSQL_PORT=
# mysql database name of the project
CONTAINER_MYSQL_DB_NAME=my_project_db
# project database root password
CONTAINER_MYSQL_ROOT_PASS=root
# mysql config provider directory
# container configs from directory configs/mysql/${CONFIGS_PROVIDER_MYSQL} will be prepared during starting
# available providers: default
CONFIGS_PROVIDER_MYSQL=default
# docker-sync config provider directory which defines files sharing settings between host system and docker volumes
# container configs from directory configs/docker-sync/mysql/${CONFIGS_PROVIDER_MYSQL_DOCKER_SYNC} will be prepared during starting
# available providers: default
CONFIGS_PROVIDER_MYSQL_DOCKER_SYNC=default
#==========================================


#REDIS
#==========================================
# enabled flag, allowed values: "yes", "no"
REDIS_ENABLE=no
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_REDIS_NAME=redis
# image name of the related docker container
CONTAINER_REDIS_IMAGE=redis
# image version of the related docker container
CONTAINER_REDIS_VERSION=latest
# config provider directory
# container configs from directory configs/redis/${CONFIGS_PROVIDER_REDIS} will be prepared during starting
# if empty configs wont be processed
CONFIGS_PROVIDER_REDIS=
#==========================================

#VARNISH
#==========================================
# enabled flag, allowed values: "yes", "no"
VARNISH_ENABLE=no
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_VARNISH_NAME=varnish
# image name of the related docker container
CONTAINER_VARNISH_IMAGE=madebyewave/varnish
# image version of the related docker container
CONTAINER_VARNISH_VERSION=4.1
# config provider directory
# container configs from directory configs/varnish/${CONFIGS_PROVIDER_VARNISH} will be prepared during starting
# if empty configs wont be processed
CONFIGS_PROVIDER_VARNISH=default
#==========================================

#ELASTICSEARCH
#==========================================
# enabled flag, allowed values: "yes", "no"
ELASTICSEARCH_ENABLE=yes
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_ELASTICSEARCH_NAME=elastic
# image name of the related docker container
CONTAINER_ELASTICSEARCH_IMAGE=docker.elastic.co/elasticsearch/elasticsearch
# image version of the related docker container
CONTAINER_ELASTICSEARCH_VERSION=6.5.4
# exposed port for elasticsearch docker service
# allowed values range: 9200-9399
# if empty first avaialble port from the given range will be allocated
CONTAINER_ELASTICSEARCH_PORT=
# config provider directory
# container configs from directory configs/elasticsearch/${CONFIGS_PROVIDER_ELASTICSEARCH} will be prepared during starting
# if empty configs wont be processed
CONFIGS_PROVIDER_ELASTICSEARCH=
# docker-sync config provider directory which defines files sharing settings between host system and docker volumes
# container configs from directory configs/docker-sync/elasticsearch/${CONFIGS_PROVIDER_ELASTICSEARCH_DOCKER_SYNC} will be prepared during starting
CONFIGS_PROVIDER_ELASTICSEARCH_DOCKER_SYNC=default
#==========================================

#BLACKFIRE
#==========================================
# enabled flag, allowed values: "yes", "no"
BLACKFIRE_ENABLE=no
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_BLACKFIRE_NAME=blackfire
# image name of the related docker container
CONTAINER_BLACKFIRE_IMAGE=blackfire/blackfire
# image version of the related docker container
CONTAINER_BLACKFIRE_VERSION=latest
# config provider directory
# container configs from directory configs/blackfire/${CONFIGS_PROVIDER_BLACKFIRE} will be prepared during starting
# if empty configs wont be processed
CONFIGS_PROVIDER_BLACKFIRE=
# blackfire credentials
BLACKFIRE_SERVER_ID_T=
BLACKFIRE_SERVER_TOKEN_T=
BLACKFIRE_CLIENT_ID_T=
BLACKFIRE_CLIENT_TOKEN_T=
#==========================================

# MONGODB CONTAINER CONFIGURATION #
#==========================================
# enabled flag, allowed values: "yes", "no"
MONGODB_ENABLE=no
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_MONGODB_NAME=mongodb
# image name of the related docker container
CONTAINER_MONGODB_IMAGE=mongo
# image version of the related docker container
CONTAINER_MONGODB_VERSION=2.4.14
# config provider directory
# container configs from directory configs/mongodb/${CONFIGS_PROVIDER_MONGODB} will be prepared during starting
# if empty configs wont be processed
CONFIGS_PROVIDER_MONGODB=
#==========================================

# POSTGRES CONTAINER CONFIGURATION #
#==========================================
# enabled flag, allowed values: "yes", "no"
POSTGRES_ENABLE=no
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_POSTGRES_NAME=postgres
# image name of the related docker container
CONTAINER_POSTGRES_IMAGE=postgres
# image version of the related docker container
CONTAINER_POSTGRES_VERSION=latest
# config provider directory
# container configs from directory configs/postgres/${CONFIGS_PROVIDER_POSTGRES} will be prepared during starting
# if empty configs wont be processed
CONFIGS_PROVIDER_POSTGRES=
#==========================================

# RABBITMQ CONTAINER CONFIGURATION #
#==========================================
# enabled flag, allowed values: "yes", "no"
RABBITMQ_ENABLE=no
# name of the related docker container, will be prefixed with "${PROJECT_NAME}_"
CONTAINER_RABBITMQ_NAME=rabbitmq
# image name of the related docker container
CONTAINER_RABBITMQ_IMAGE=rabbitmq
# image version of the related docker container
CONTAINER_RABBITMQ_VERSION=3-management
# config provider directory
# container configs from directory configs/rabbitmq/${CONFIGS_PROVIDER_RABBITMQ} will be prepared during starting
# if empty configs wont be processed
# available providers: default
CONFIGS_PROVIDER_RABBITMQ=
#==========================================

# CUSTOM CONTAINER CONFIGURATION #
#==========================================
# You can create your own docker-compose file and put them to the configs/docker-compose/your-custom-compose.yml
# then set CUSTOM_COMPOSE=your-custom-compose.yml to start project unisng custom files
# several comma-separated values are possible
CUSTOM_COMPOSE=
# custom config provider directory
# container configs from directory configs/custom/${CONFIGS_PROVIDER_CUSTOM} will be prepared during starting
# if empty configs wont be processed
CONFIGS_PROVIDER_CUSTOM=

# UNISON SYNCED FOLDERS [FOR WINDOWS / MAC ONLY]#
# Unison section is deprecated, use docker-sync params instead
# See examples in configs/docker-sync/* to get more details
#==========================================
# not used anymore
#USE_UNISON_SYNC=1
# not used anymore
#UNISON_LOCAL_ROOT=public_html
# not used anymore
#UNISON_REMOTE_ROOT=${WEBSITE_APPLICATION_ROOT}
# not used anymore
#CONTAINER_WEB_UNISON_PORT=
# not used anymore, left just for backward compatibility to choose website docker-sync config provider
#CONFIGS_PROVIDER_UNISON=default
#==========================================

# PLATFORM TOOLS PROVIDER #
#==========================================
# PLATFORM TOOLS PROVIDER - The folder in devboxwebsite root with platform utilities
# It lets to simplify project starting using more popular commands collected in one package
# The local directory ./${TOOLS_PROVIDER}/${TOOLS_PROVIDER_ENTRYPOINT} will be available inside container
# as ${TOOLS_PROVIDER_REMOTE_PATH}/${TOOLS_PROVIDER_ENTRYPOINT}
# also alias 'platform-tools' is available inside container to run most popular commands
#==========================================
TOOLS_PROVIDER=vendor
TOOLS_PROVIDER_REMOTE_PATH=/var/www/platform-tools
# available values for TOOLS_PROVIDER_ENTRYPOINT: ewave/devbox-core-scripts/coreinit,
# ewave/devbox-m1-scripts/m1init, ewave/devbox-m2-scripts/m2init,
# ewave/devbox-akeneo2-scripts/akeneo2init, ewave/devbox-akeneo2-scripts/akeneo3init
TOOLS_PROVIDER_ENTRYPOINT=ewave/devbox-core-scripts/coreinit
# Platform-tools project configuration file
PROJECT_CONFIGURATION_FILE=/var/www/.env-project.json
#==========================================

# Static paths of project dir, required for docker-sync, will be evaluated based on other params.
# Recommended to keep them empty
DEVBOX_PROJECT_DIR=
DEVBOX_PROJECT_UP_DIR=
COMPOSER_CACHE_DIR=
